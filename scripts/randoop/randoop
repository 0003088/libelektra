#!/bin/sh
#
# Executes the test generation tool randoop (https://randoop.github.io/randoop/)
# against the jna bindings with a standard configuration.
# Needs java to be accessible in the environment.
# By default it assumes randoop to be in the directory containing this script and 
# the jna bindings to be in /usr/share/java.
# You can pass a custom location for the two files by calling this script like
# ./randoop <path to randoop jar> <path to libelektra4j jar>

RANDOOP="${1:-randoop-all-3.1.5.jar}"

stringContain() { [ -z "${2##*$1*}" ] && ([ -z "$1" ] || [ -n "$2" ]); }
if stringContain "Darwin" "$(uname)"; then
	BINDINGS="${2:-/usr/local/share/java/libelektra4j-0.8.19.jar}"
else
	BINDINGS="${2:-/usr/share/java/libelektra4j-0.8.19.jar}"
fi
CLASSPATH="${BINDINGS}:${RANDOOP}"

# The non-public members are not intended for users of the bindings. Those are
# native function calls to the elektra library and calling them randomly like
# randoop would do may result in jvm segmentation faults.
java -ea -classpath ${CLASSPATH} randoop.main.Main gentests \
--classlist=randoopClasses.txt --timelimit=120 --only-test-public-members=true
